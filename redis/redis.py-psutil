#!/usr/bin/env python
#-*- coding:utf-8 -*-

import os, re, sys, json, signal, commands, psutil
#import profile
#from pudb import set_trace; set_trace()

def handler(signum, frame):
     sys.exit()

monit_keys = {
    'connected_clients': 'gauge',
    'blocked_clients': 'gauge',
    'used_memory': 'gauge',
    'used_memory_rss': 'gauge',
    'max_memory': 'gauge',
    'mem_fragmentation_ratio': 'gauge',
    'total_commands_processed': 'counter',
    'rejected_connections': 'counter',
    'expired_keys': 'counter',
    'total_net_input_bytes': 'gauge',
    'total_net_output_bytes': 'gauge',
    'evicted_keys': 'counter',
    'client_biggest_input_buf': 'counter',
    'client_longest_output_list': 'counter',
    'keyspace_hits': 'counter',
    'keyspace_misses': 'counter',
    'used_cpu_sys': 'counter',
    'used_cpu_user': 'counter',
}

class RedisStats:
    redis_cli = '/usr/local/bin/redis-cli'
    stat_regex = re.compile(ur'(\w+):([0-9]+\.?[0-9]*)\r')

#    @profile
    def __init__(self, _port='6379', _host='127.0.0.1' ,status='info'):
        self._host=_host
        self._port=_port
        self.cmd = '%s -h %s -p %s %s' % (self.redis_cli, _host, _port, status)


#    @profile
    def get_info(self, cpu_used):
        stats = dict(self.stat_regex.findall(commands.getoutput(self.cmd).strip()))
        p = {}
        for (key, vtype) in monit_keys.items():
            if key == 'port_os_used_cpu':
                value = cpu_used
                p[key] = '{port="%s"} %s' % (self._port, value)
            elif key == 'max_memory':
                value = commands.getoutput('%s -h %s -p %s config get maxmemory |grep -v maxmemory' % (self.redis_cli, self._host, self._port)).strip()
                p[key] = '{port="%s"} %s' % (self._port, value)
            else:
                if key in stats.keys():
                    value = stats[key]
                    p[key] = '{port="%s"} %s' % (self._port, value)
        return p

def get_cpuinfo():
    cmd = "/usr/bin/top -bn 1 |grep redis-server |awk '{print $1,$9}'"
    str_cpuinfo = commands.getoutput("/usr/bin/top -bn 1 |grep redis-server |awk '{print $1,$9}'").strip()
    d_cpuinfo = {}
    l_cpuinfo = str_cpuinfo.splitlines()
    for i in range(len(l_cpuinfo)):
        d_cpuinfo[l_cpuinfo[i].split(' ')[0]] = l_cpuinfo[i].split(' ')[1]
    if d_cpuinfo:
        return d_cpuinfo
    else:
        print("d_cpuinfo is none")

def print_metrics_info(l_all_metrics=[]):
    d_all_metrics = {}
    # 把list转成dict:{'metric':['{port="%s"} %s % (port, value)']}
    for m in l_all_metrics:
        for (k, v) in m.items():
            if d_all_metrics.get(k) is None:
                d_all_metrics[k] = []
            d_all_metrics[k].append(v)
    for (metric, value) in d_all_metrics.items():
        print '# HELP redis_%s info' % metric
        print '# TYPE redis_%s %s' % (metric, monit_keys[metric])
        for v in d_all_metrics[metric]:
            print ('redis_%s%s' % (metric, v))

#ps -ef |grep 'redis-server' |grep -v grep |awk '{print $2,$9}'  该命令出现三种结果
#29454 0.0.0.0:6392
#30834
#10823 /etc/redisConf/redis7.conf
def compare_instances(_file, l_alive_instances):
    if os.path.exists(_file):
        with open(_file, 'r') as f:
            old_instances = f.read()
        if not old_instances:
            with open(_file, 'w') as f:
                f.write(json.dumps(l_alive_instances))
            compare_instances(_file, l_alive_instances)
        else:
            l_old_instances = json.loads(old_instances)
            print '''# HELP redis_is_alive info
# TYPE redis_is_alive gauge'''
            for i in l_old_instances:
                value = 1
                if ':' in i:
                    port = i.split(':')[1]
                else:
                    if i != '':
                        confFile=i
                        port = commands.getoutput("grep port %s |cut -d ' ' -f 2" % confFile).strip()
                    else:
                        port=6379
                if i not in l_alive_instances:
                    value = 0
                print 'redis_is_alive{port="%s"} %s' % (port, value)
            if l_old_instances != l_alive_instances:
                for j in l_alive_instances:
                    if j not in l_old_instances:
                        l_old_instances.append(j)
                with open(_file, 'w') as f:
                    f.write(json.dumps(l_old_instances))
    else:
        with open(_file, 'w') as f:
            f.write(json.dumps(l_alive_instances))
        compare_instances(_file, l_alive_instances)

def str_to_list(str):
    l = []
    for i in str.split('\n'):
        l.append(i.split(' ')[1])
    return l

def processinfo(processName):
    d_pid_cpuUsage = {}
    for pid in psutil.pids():
        try:
            p = psutil.Process(pid)
            if p.name() == processName:
                d_pid_cpuUsage[pid] = p.cpu_percent(interval=None)
        except (psutil.ZombieProcess, psutil.AccessDenied, psutil.NoSuchProcess):
            continue
    return d_pid_cpuUsage
def processPort(pid):
    p = psutil.Process(pid)
    data = p.connections()
    data_listen=[x for x in data if 'LISTEN' in x ]
    return data_listen[0][3]

def processPorts(pids):
    net_connections = psutil.net_connections(kind='tcp4')
    for key in net_connections:
        if key.pid in pids and key.status == 'LISTEN':
            print
def get_all_instances_metrics(_d_pid_cpuUsage):
    l_all_metrics = []
    # 循环每个实例,每个实例的数据都append到l_all_metrics列表中
    for pid in _d_pid_cpuUsage.keys():
        (host, port) = processPort(pid)
        if host == '0.0.0.0':
            host = '127.0.0.1'
        _redis = RedisStats(port, host)
        l_all_metrics.append(_redis.get_info(_d_pid_cpuUsage[pid]))
    return l_all_metrics

if __name__ == "__main__":
    d_pid_cpuUsage = processinfo('redis-server')
    print(d_pid_cpuUsage)
#    if d_pid_cpuUsage:
#        l_all_metrics = get_all_instances_metrics(d_pid_cpuUsage)
#        #print(l_all_metrics)
#        print_metrics_info(l_all_metrics)
#    else:
#        print 'does not have a redis'
