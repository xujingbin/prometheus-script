#!/usr/bin/env python
#-*- coding:utf-8 -*-

import os, re, sys, json, signal, subprocess
#import profile
#from pudb import set_trace; set_trace()

def handler(signum, frame):
     sys.exit()

monit_keys = {
    'connected_clients': 'gauge',
    'blocked_clients': 'gauge',
    'used_memory': 'gauge',
    'used_memory_rss': 'gauge',
    'max_memory': 'gauge',
    'mem_fragmentation_ratio': 'gauge',
    'total_commands_processed': 'counter',
    'rejected_connections': 'counter',
    'expired_keys': 'counter',
    'total_net_input_bytes': 'gauge',
    'total_net_output_bytes': 'gauge',
    'evicted_keys': 'counter',
    'client_biggest_input_buf': 'counter',
    'client_longest_output_list': 'counter',
    'keyspace_hits': 'counter',
    'keyspace_misses': 'counter',
    'port_os_used_cpu': 'gauge',
}

class RedisStats:
    redis_cli = '/usr/local/bin/redis-cli'
    stat_regex = re.compile(ur'(\w+):([0-9]+\.?[0-9]*)\r')

#    @profile
    def __init__(self, _port='6379', _host='127.0.0.1' ,status='info'):
        self._host=_host
        self._port=_port
        self.cmd = '%s -h %s -p %s %s' % (self.redis_cli, _host, _port, status)


#    @profile
    def get_info(self, proc, cpu_used):
        stats = dict(self.stat_regex.findall(subprocess.check_output(self.cmd, shell=True).strip()))
        p = {}
        for (key, vtype) in monit_keys.items():
            if key == 'port_os_used_cpu':
                #str = "/usr/bin/top -bn 1 -p %s | grep %s | awk '{if ($9 ~ /^[0-9.].*[0-9]$/) print $9}'  | head -1" % (proc, proc)
                value = cpu_used
                p[key] = '{port="%s"} %s' % (self._port, value)
            elif key == 'max_memory':
                value = subprocess.check_output('%s -h %s -p %s config get maxmemory |grep -v maxmemory' % (self.redis_cli, self._host, self._port), shell=True).strip()
                p[key] = '{port="%s"} %s' % (self._port, value)
            else:
                if key in stats.keys():
                    value = stats[key]
                    p[key] = '{port="%s"} %s' % (self._port, value)
        return p

def get_cpuinfo():
    #cmd = "/usr/bin/top -bn 1 |grep redis-server |awk '{print $1,$9}'"
    cmd = "ps aux |grep 'redis-server' |grep -v 'grep' |awk '{print $2,$3}'"
    output = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    if output:
        l_cpuinfo = output.stdout.readlines()
#    str_cpuinfo = output.communicate()[0].strip()
#    print str_cpuinfo
    d_cpuinfo = {}
#    l_cpuinfo = str_cpuinfo.splitlines()
    for i in range(len(l_cpuinfo)):
        d_cpuinfo[l_cpuinfo[i].split(' ')[0]] = l_cpuinfo[i].split(' ')[1].strip()
    if d_cpuinfo:
        return d_cpuinfo
    else:
        print("d_cpuinfo is none")

def get_all_instances_metrics(_redis_instance='', l_all_metrics=[]):
    # 循环每个实例,每个实例的数据都append到l_all_metrics列表中
    for i in _redis_instance.strip().split('\n'):
        if ':' in i:
            proc = i.split(' ')[0]
            host = i.split(' ')[1].split(':')[0]
            port = i.split(':')[1]
        else:
            host = '127.0.0.1'
            if i.split(' ')[1] != '':
                confFile=i.split(' ')[1]
                proc=i.split(' ')[0]
                port = subprocess.check_output("grep port %s |cut -d ' ' -f 2" % confFile, shell=True).strip()
            else:
                proc=i.split(' ')[0]
                port=6379
        if host == '*':
            host=subprocess.check_output("ip addr show em2 | grep 'inet ' |awk '{print $2}' |awk -F '/' '{print $1}'", shell=True).strip()
        _redis = RedisStats(port, host)
        l_all_metrics.append(_redis.get_info(proc, d_cpuinfo[proc]))
    return l_all_metrics


def print_metrics_info(l_all_metrics=[]):
    d_all_metrics = {}
    # 把list转成dict:{'metric':['{port="%s"} %s % (port, value)']}
    for m in l_all_metrics:
        for (k, v) in m.items():
            if d_all_metrics.get(k) is None:
                d_all_metrics[k] = []
            d_all_metrics[k].append(v)
    for (metric, value) in d_all_metrics.items():
        print '# HELP redis_%s info' % metric
        print '# TYPE redis_%s %s' % (metric, monit_keys[metric])
        for v in d_all_metrics[metric]:
            print ('redis_%s%s' % (metric, v))

#ps -ef |grep 'redis-server' |grep -v grep |awk '{print $2,$9}'  该命令出现三种结果
#29454 0.0.0.0:6392
#30834
#10823 /etc/redisConf/redis7.conf
def compare_instances(_file, l_alive_instances):
    if os.path.exists(_file):
        with open(_file, 'r') as f:
            old_instances = f.read()
        if not old_instances:
            with open(_file, 'w') as f:
                f.write(json.dumps(l_alive_instances))
            compare_instances(_file, l_alive_instances)
        else:
            l_old_instances = json.loads(old_instances)
            print '''# HELP redis_is_alive info
# TYPE redis_is_alive gauge'''
            for i in l_old_instances:
                value = 1
                if ':' in i:
                    port = i.split(':')[1]
                else:
                    if i != '':
                        confFile=i
                        port = subprocess.check_output("grep port %s |cut -d ' ' -f 2" % confFile, shell=True).strip()
                    else:
                        port=6379
                if i not in l_alive_instances:
                    value = 0
                print 'redis_is_alive{port="%s"} %s' % (port, value)
            if l_old_instances != l_alive_instances:
                for j in l_alive_instances:
                    if j not in l_old_instances:
                        l_old_instances.append(j)
                with open(_file, 'w') as f:
                    f.write(json.dumps(l_old_instances))
    else:
        with open(_file, 'w') as f:
            f.write(json.dumps(l_alive_instances))
        compare_instances(_file, l_alive_instances)

def str_to_list(str):
    l = []
    for i in str.split('\n'):
        l.append(i.split(' ')[1])
    return l

if __name__ == "__main__":
    cmd = "ps -ef |egrep './redis-server|redis-server ' |grep -v grep |awk '{print $2,$9}' |sort |uniq"
    signal.signal(signal.SIGALRM, handler)
    signal.alarm(3)
    redis_all_instances =  subprocess.check_output(cmd, shell=True).strip()
    l_redis_all_instances = str_to_list(redis_all_instances)
    compare_instances('/tmp/redis_instances', l_redis_all_instances)
    # 判断是否有运行redis实例
    if redis_all_instances:
        d_cpuinfo = get_cpuinfo()
        if d_cpuinfo is not None:
            l_all_metrics=get_all_instances_metrics(redis_all_instances)
            print_metrics_info(l_all_metrics)
    else:
        print 'does not have a redis'
    signal.alarm(0)
